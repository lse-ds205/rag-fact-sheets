import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
const RESEND_API_KEY = Deno.env.get('RESEND_API_KEY');
serve(async (req)=>{
  try {
    const body = await req.json();
    console.log('Received request body:', JSON.stringify(body, null, 2));
    // Validate required fields
    if (!body.to || !body.from || !body.subject) {
      return new Response(JSON.stringify({
        error: 'Missing required fields: to, from, subject'
      }), {
        status: 400,
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }
    // Prepare Resend payload - INCLUDE ATTACHMENTS
    const resendPayload = {
      to: body.to,
      from: body.from,
      subject: body.subject
    };
    // Add optional fields
    if (body.html) resendPayload.html = body.html;
    if (body.text) resendPayload.text = body.text;
    if (body.reply_to) resendPayload.reply_to = body.reply_to;
    if (body.cc) resendPayload.cc = body.cc;
    if (body.bcc) resendPayload.bcc = body.bcc;
    // CRITICAL: Include attachments if they exist
    if (body.attachments && Array.isArray(body.attachments) && body.attachments.length > 0) {
      resendPayload.attachments = body.attachments;
      console.log(`Adding ${body.attachments.length} attachments to Resend payload`);
      // Log attachment details (without content to avoid huge logs)
      body.attachments.forEach((att, index)=>{
        console.log(`Attachment ${index + 1}: ${att.filename} (${att.content ? att.content.length : 0} chars)`);
      });
    } else {
      console.log('No attachments to include');
    }
    // CRITICAL: Include tags in correct format
    if (body.tags) {
      if (Array.isArray(body.tags)) {
        // Convert array format to object format for Resend
        const tagsObj = {};
        body.tags.forEach((tag)=>{
          if (tag.name && tag.value) {
            tagsObj[tag.name] = tag.value;
          }
        });
        if (Object.keys(tagsObj).length > 0) {
          resendPayload.tags = tagsObj;
        }
      } else if (typeof body.tags === 'object') {
        // Already in correct object format
        resendPayload.tags = body.tags;
      }
    }
    console.log('Sending to Resend API:', JSON.stringify({
      ...resendPayload,
      attachments: resendPayload.attachments ? `${resendPayload.attachments.length} attachments` : 'none'
    }, null, 2));
    // Send to Resend API
    const resendResponse = await fetch('https://api.resend.com/emails', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${RESEND_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(resendPayload)
    });
    const resendData = await resendResponse.json();
    console.log('Resend API response:', resendData);
    if (!resendResponse.ok) {
      console.error('Resend API error:', resendData);
      return new Response(JSON.stringify({
        error: 'Failed to send email',
        details: resendData,
        status: resendResponse.status
      }), {
        status: resendResponse.status,
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }
    return new Response(JSON.stringify({
      success: true,
      data: resendData,
      attachments_sent: resendPayload.attachments ? resendPayload.attachments.length : 0
    }), {
      status: 200,
      headers: {
        'Content-Type': 'application/json'
      }
    });
  } catch (error) {
    console.error('Edge function error:', error);
    return new Response(JSON.stringify({
      error: 'Internal server error',
      details: error.message
    }), {
      status: 500,
      headers: {
        'Content-Type': 'application/json'
      }
    });
  }
});
